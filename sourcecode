#include <stdio.h>
#include <curses.h>
#include <stdlib.h>
#include <string.h>
#include <bits/stdc++.h>
#include <iostream>

using namespace std;

struct employee
{
	int  id;
	char name[51];
	char designation[51];
	char expertise[51];
	char joiningdate[51];    
	struct employee *next;

};

void addEmployee(struct employee **HeadofList)
{

	struct employee *ptr;
	ptr=*HeadofList;
     
	if(ptr == NULL)
	{	ptr = (struct employee*) malloc(sizeof(struct employee));

		cout<<"\nEnter the employee number:";
		scanf("%d",&ptr->id);
		cout<<"\nEnter the employee name :";
		scanf("%s",ptr->name);
		cout<<"\nEnter the employee designation :";
		scanf("%s", ptr->designation);
		cout<<"\nEnter the employee expertise :";
		scanf("%s",ptr->expertise);
		cout<<"\nEnter the employee joiningdate :";
		scanf("%s", ptr->joiningdate);
		ptr->next=NULL;
		*HeadofList = ptr;
	}
	else 
	{
		while(ptr->next!=NULL)
		{
		ptr=ptr->next;
		}
	        ptr->next= (struct employee*) malloc(sizeof(struct employee));
		ptr=ptr->next;
		cout<<"\nEnter the employee number :";
		scanf("%d",&ptr->id);
		cout<<"\nEnter the employee name :";
		scanf("%s",ptr->name);
		cout<<"\nEnter the employee designation :";
		scanf("%s",ptr->designation);
		cout<<"\nEnter the employee expertise :";
		scanf("%s", ptr->expertise);
		cout<<"\nEnter the employee joinigdate :";
		scanf("%s", ptr->joiningdate);
		ptr->next=NULL;
		


	}




}

void printNode(struct employee  *p)

{
	cout<< "\n.........Employee Details.....\n"<<endl;
	cout<< " Emp No -->    :    "<<p->id<<endl;
	cout<< " Name -->           :"<<p->name<<endl;
	cout<< " Designation -->  : " <<p->designation<<endl;
	cout<< " Expertise -->    : "<<p->expertise<<endl;
	cout<< " joiningdate -->   : "<<p->joiningdate<<endl;
	cout<< "..............................\n"<<endl; 
}
void   removeEmployee(struct employee  **HeadofList)
{
	int id;
	struct employee *ptr;
	struct employee *Head;
	struct employee *bptr;
	Head=*HeadofList;

	if(Head==NULL)
	{
		cout<<"List is empty\n"<<endl;
		return;
	}
	cout<<" Enter the employee number to be deleted: "<<endl;
	cin>>id;

	if (Head->id == id)
	{
		ptr = Head;
		cout<<" Node deleted:";
		printNode(Head);
		Head = Head ->next;
		free(ptr);
	}
	for (ptr = Head->next, bptr = Head; ptr != NULL; ptr = ptr->next,
			bptr = bptr->next)
	{
		if (ptr->id == id)
		{
			cout<<" Node deleted:"<<endl;
			printNode(ptr);
			bptr->next = ptr->next;
			free(ptr);
		}
	}
	cout<<" Employee Number not found "<<id<<endl;
}
void findEmployee(struct employee **HeadofList)
{
	int key;
	struct employee *ptr;
	struct employee *find;
	find = *HeadofList;
	ptr= find;

	cout<<" Enter the employee number to be found: "<<endl;
	cin>>key;
	for (ptr = find; ptr != NULL; ptr = ptr -> next)
	{
		if (ptr->id == key)
		{
			cout<<"Key found:"<<endl;
			printNode(ptr);
			return;
		}
	}
	cout<<"Employee Number  not found "<<key<<endl;
}

void displayList(struct employee  *HeadofList)
{
	struct employee *display;
	display=HeadofList;

	if (display == NULL)
		printf("List	Empty");
        cout<< display<<endl;
	while(display->next!=NULL)

	{
		printNode(display);
		display=display->next;
		
	}
	printNode(display);

}
int  option()
{
	int choice;  
	cout<<"\n Press 1 to INSERT a node into the list\n";
	cout<<" Press 2 to DELETE a node from the list\n";
	cout<<" press 3 to DISPLAY the list\n";
	cout<<" Press 4 to SEARCH the list\n";
	cout<<" Press 5 to EXIT...\n";
	cout<<" \nEnter your choice: ";
	cin>>choice;
	cout<<"\n";
	return choice;
}
int main()
{
	struct employee *employeeList = NULL;
	int choice;
	cout<<" Welcome to ebytelogic!\n";
	do
	{
		choice = option();
		switch(choice)
		{
			case 1:
				addEmployee(&employeeList);
				break;
			case 2:
				removeEmployee(&employeeList);
				break;
			case 3:
				displayList(employeeList);
				break;	    
			case 4:
				findEmployee(&employeeList);
				break;
			case 5:
				return 0;
			default :
				cout<<"Invalid choice.";
		}
	}  while (1);

	return 0;
}
